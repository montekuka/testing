import { ServiceError } from '@grpc/grpc-js';
import { InworldPacket } from '../../../../proto/packets_pb';
import { CapabilitiesRequest, ClientRequest, UserRequest } from '../../../../proto/world-engine_pb';
import { Awaitable } from '../../common/interfaces';
import { SessionToken } from '../../entities/session_token.entity';
export interface LoadSceneProps {
    name: string;
    client?: ClientRequest;
    user?: UserRequest;
    sessionToken: SessionToken;
    capabilities: CapabilitiesRequest;
}
export interface SessionProps {
    sessionToken: SessionToken;
    onDisconnect?: () => void;
    onError?: (err: ServiceError) => void;
    onMessage?: (message: InworldPacket) => Awaitable<void>;
}
export declare class WorldEngineClientGrpcService {
    private readonly config;
    private readonly client;
    loadScene(props: LoadSceneProps): Promise<any>;
    session(props: SessionProps): import("@grpc/grpc-js").ClientDuplexStream<InworldPacket, InworldPacket>;
    private getMetadata;
}
