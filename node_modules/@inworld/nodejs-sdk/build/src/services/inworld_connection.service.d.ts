import { CancelResponsesProps } from '../common/interfaces';
import { Character } from '../entities/character.entity';
import { TriggerParameter } from '../entities/inworld_packet.entity';
import { ConnectionService } from './connection.service';
export declare class InworldConnectionService {
    private connection;
    constructor(connection: ConnectionService);
    open(): Promise<void>;
    close(): void;
    isActive(): boolean;
    getCharacters(): Promise<Character[]>;
    getCurrentCharacter(): Promise<Character>;
    setCurrentCharacter(character: Character): void;
    sendText(text: string): Promise<import("../entities/inworld_packet.entity").InworldPacket>;
    sendAudio(chunk: string): Promise<import("../entities/inworld_packet.entity").InworldPacket>;
    sendTrigger(name: string, parameters?: TriggerParameter[]): Promise<import("../entities/inworld_packet.entity").InworldPacket>;
    sendAudioSessionStart(): Promise<import("../entities/inworld_packet.entity").InworldPacket>;
    sendAudioSessionEnd(): Promise<import("../entities/inworld_packet.entity").InworldPacket>;
    sendCancelResponse(cancelResponses?: CancelResponsesProps): Promise<import("../entities/inworld_packet.entity").InworldPacket>;
}
