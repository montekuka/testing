"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InworldPacket = exports.InworlControlType = exports.InworldPacketType = void 0;
var InworldPacketType;
(function (InworldPacketType) {
    InworldPacketType["UNKNOWN"] = "UNKNOWN";
    InworldPacketType["TEXT"] = "TEXT";
    InworldPacketType["AUDIO"] = "AUDIO";
    InworldPacketType["TRIGGER"] = "TRIGGER";
    InworldPacketType["EMOTION"] = "EMOTION";
    InworldPacketType["CONTROL"] = "CONTROL";
    InworldPacketType["SILENCE"] = "SILENCE";
    InworldPacketType["CANCEL_RESPONSE"] = "CANCEL_RESPONSE";
})(InworldPacketType = exports.InworldPacketType || (exports.InworldPacketType = {}));
var InworlControlType;
(function (InworlControlType) {
    InworlControlType["UNKNOWN"] = "UNKNOWN";
    InworlControlType["INTERACTION_END"] = "INTERACTION_END";
})(InworlControlType = exports.InworlControlType || (exports.InworlControlType = {}));
class InworldPacket {
    constructor(props) {
        this.type = InworldPacketType.UNKNOWN;
        this.packetId = props.packetId;
        this.routing = props.routing;
        this.date = props.date;
        this.type = props.type;
        if (this.isText()) {
            this.text = props.text;
        }
        if (this.isAudio()) {
            this.audio = props.audio;
        }
        if (this.isControl()) {
            this.control = props.control;
        }
        if (this.isEmotion()) {
            this.emotions = props.emotions;
        }
        if (this.isTrigger()) {
            this.trigger = props.trigger;
        }
        if (this.isSilence()) {
            this.silence = props.silence;
        }
        if (this.isCancelResponse()) {
            this.cancelResponses = props.cancelResponses;
        }
    }
    isText() {
        return this.type === InworldPacketType.TEXT;
    }
    isAudio() {
        return this.type === InworldPacketType.AUDIO;
    }
    isControl() {
        return this.type === InworldPacketType.CONTROL;
    }
    isTrigger() {
        return this.type === InworldPacketType.TRIGGER;
    }
    isEmotion() {
        return this.type === InworldPacketType.EMOTION;
    }
    isInteractionEnd() {
        return (this.isControl() &&
            this.control.type === InworlControlType.INTERACTION_END);
    }
    isSilence() {
        return this.type === InworldPacketType.SILENCE;
    }
    isCancelResponse() {
        return this.type === InworldPacketType.CANCEL_RESPONSE;
    }
}
exports.InworldPacket = InworldPacket;
