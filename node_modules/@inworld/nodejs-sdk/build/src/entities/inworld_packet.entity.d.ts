import { EmotionBehavior } from './emotion-behavior.entity';
import { EmotionStrength } from './emotion-strength.entity';
export declare enum InworldPacketType {
    UNKNOWN = "UNKNOWN",
    TEXT = "TEXT",
    AUDIO = "AUDIO",
    TRIGGER = "TRIGGER",
    EMOTION = "EMOTION",
    CONTROL = "CONTROL",
    SILENCE = "SILENCE",
    CANCEL_RESPONSE = "CANCEL_RESPONSE"
}
export declare enum InworlControlType {
    UNKNOWN = "UNKNOWN",
    INTERACTION_END = "INTERACTION_END"
}
export interface InworldPacketProps {
    audio?: AudioEvent;
    cancelResponses?: CancelResponsesEvent;
    control?: ControlEvent;
    trigger?: TriggerEvent;
    emotions?: EmotionEvent;
    silence?: SilenceEvent;
    packetId: PacketId;
    routing: Routing;
    text?: TextEvent;
    date: string;
    type: InworldPacketType;
}
export interface PacketId {
    packetId: string;
    utteranceId: string;
    interactionId: string;
}
export interface EmotionEvent {
    behavior: EmotionBehavior;
    strength: EmotionStrength;
}
export interface Routing {
    source: Actor;
    target: Actor;
}
export interface Actor {
    name: string;
    isPlayer: boolean;
    isCharacter: boolean;
}
export interface TriggerParameter {
    name: string;
    value: string;
}
export interface TextEvent {
    text: string;
    final: boolean;
}
export interface TriggerEvent {
    name: string;
    parameters?: TriggerParameter[];
}
export interface AdditionalPhonemeInfo {
    phoneme?: string;
    startOffsetS?: number;
}
export interface AudioEvent {
    chunk: string;
    additionalPhonemeInfo?: AdditionalPhonemeInfo[];
}
export interface SilenceEvent {
    durationMs: number;
}
export interface CancelResponsesEvent {
    interactionId?: string;
    utteranceId?: string[];
}
export interface ControlEvent {
    type: InworlControlType;
}
export declare class InworldPacket {
    private type;
    date: string;
    packetId: PacketId;
    routing: Routing;
    text: TextEvent;
    audio: AudioEvent;
    control: ControlEvent;
    trigger: TriggerEvent;
    emotions: EmotionEvent;
    silence: SilenceEvent;
    cancelResponses: CancelResponsesEvent;
    constructor(props: InworldPacketProps);
    isText(): boolean;
    isAudio(): boolean;
    isControl(): boolean;
    isTrigger(): boolean;
    isEmotion(): boolean;
    isInteractionEnd(): boolean;
    isSilence(): boolean;
    isCancelResponse(): boolean;
}
