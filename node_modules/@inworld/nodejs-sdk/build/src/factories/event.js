"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventFactory = void 0;
const packets_pb_1 = require("../../../proto/packets_pb");
const uuid_1 = require("uuid");
const helpers_1 = require("../common/helpers");
const emotion_behavior_entity_1 = require("../entities/emotion-behavior.entity");
const emotion_strength_entity_1 = require("../entities/emotion-strength.entity");
const inworld_packet_entity_1 = require("../entities/inworld_packet.entity");
class EventFactory {
    constructor() {
        this.character = null;
    }
    getCurrentCharacter() {
        return this.character;
    }
    setCurrentCharacter(character) {
        this.character = character;
    }
    dataChunk(chunk, type) {
        const event = new packets_pb_1.DataChunk().setType(type).setChunk(chunk);
        return this.protoPacket().setDataChunk(event);
    }
    audioSessionStart() {
        const event = new packets_pb_1.ControlEvent().setAction(packets_pb_1.ControlEvent.Action.AUDIO_SESSION_START);
        return this.protoPacket().setControl(event);
    }
    audioSessionEnd() {
        const event = new packets_pb_1.ControlEvent().setAction(packets_pb_1.ControlEvent.Action.AUDIO_SESSION_END);
        return this.protoPacket().setControl(event);
    }
    text(text) {
        const event = new packets_pb_1.TextEvent()
            .setText(text)
            .setSourceType(packets_pb_1.TextEvent.SourceType.TYPED_IN)
            .setFinal(true);
        const packet = this.packet().setUtteranceId((0, uuid_1.v4)()).setInteractionId((0, uuid_1.v4)());
        return this.protoPacket().setPacketId(packet).setText(event);
    }
    trigger(name, parameters = []) {
        const event = new packets_pb_1.CustomEvent().setName(name);
        if (parameters.length) {
            event.setParametersList(parameters.map((p) => new packets_pb_1.CustomEvent.Parameter().setName(p.name).setValue(p.value)));
        }
        const packet = this.packet().setUtteranceId((0, uuid_1.v4)()).setInteractionId((0, uuid_1.v4)());
        return this.protoPacket().setCustom(event).setPacketId(packet);
    }
    cancelResponse(cancelResponses) {
        const event = new packets_pb_1.CancelResponsesEvent();
        if (cancelResponses === null || cancelResponses === void 0 ? void 0 : cancelResponses.interactionId) {
            event.setInteractionId(cancelResponses.interactionId);
        }
        if (cancelResponses === null || cancelResponses === void 0 ? void 0 : cancelResponses.utteranceId) {
            event.setUtteranceIdList(cancelResponses.utteranceId);
        }
        return this.protoPacket().setCancelresponses(event);
    }
    static fromProto(proto) {
        var _a, _b;
        const packetId = proto.getPacketId();
        const routing = proto.getRouting();
        const source = routing.getSource();
        const target = routing.getTarget();
        const type = this.getType(proto);
        const textEvent = proto.getText();
        const emotionEvent = proto.getEmotion();
        const additionalPhonemeInfo = (_b = (_a = proto.getDataChunk()) === null || _a === void 0 ? void 0 : _a.getAdditionalPhonemeInfoList()) !== null && _b !== void 0 ? _b : [];
        return new inworld_packet_entity_1.InworldPacket(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ type, date: proto.getTimestamp().toDate().toISOString(), packetId: {
                packetId: packetId.getPacketId(),
                utteranceId: packetId.getUtteranceId(),
                interactionId: packetId.getInteractionId(),
            }, routing: {
                source: {
                    name: source.getName(),
                    isPlayer: source.getType() === packets_pb_1.Actor.Type.PLAYER,
                    isCharacter: source.getType() === packets_pb_1.Actor.Type.AGENT,
                },
                target: {
                    name: target.getName(),
                    isPlayer: target.getType() === packets_pb_1.Actor.Type.PLAYER,
                    isCharacter: target.getType() === packets_pb_1.Actor.Type.AGENT,
                },
            } }, (type === inworld_packet_entity_1.InworldPacketType.TRIGGER && {
            trigger: {
                name: proto.getCustom().getName(),
                parameters: proto
                    .getCustom()
                    .getParametersList()
                    .map((p) => ({
                    name: p.getName(),
                    value: p.getValue(),
                })),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.TEXT && {
            text: {
                text: textEvent.getText(),
                final: textEvent.getFinal(),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.AUDIO && {
            audio: {
                chunk: proto.getDataChunk().getChunk_asB64(),
                additionalPhonemeInfo: additionalPhonemeInfo.map((info) => ({
                    phoneme: info.getPhoneme(),
                    startOffsetS: this.durationToSeconds(info.getStartOffset()),
                })),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.CONTROL && {
            control: {
                type: this.getControlType(proto),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.SILENCE && {
            silence: {
                durationMs: proto.getDataChunk().getDurationMs(),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.EMOTION && {
            emotions: {
                behavior: new emotion_behavior_entity_1.EmotionBehavior(emotion_behavior_entity_1.EmotionBehavior.fromProto(emotionEvent.getBehavior())),
                strength: new emotion_strength_entity_1.EmotionStrength(emotion_strength_entity_1.EmotionStrength.fromProto(emotionEvent.getStrength())),
            },
        })), (type === inworld_packet_entity_1.InworldPacketType.CANCEL_RESPONSE && {
            cancelResponses: {
                interactionId: proto.getCancelresponses().getInteractionId(),
                utteranceId: proto.getCancelresponses().getUtteranceIdList(),
            },
        })));
    }
    protoPacket() {
        return new packets_pb_1.InworldPacket()
            .setPacketId(this.packet())
            .setRouting(this.routing())
            .setTimestamp((0, helpers_1.protoTimestamp)());
    }
    routing() {
        var _a;
        const source = new packets_pb_1.Actor().setType(packets_pb_1.Actor.Type.PLAYER);
        const target = new packets_pb_1.Actor()
            .setType(packets_pb_1.Actor.Type.AGENT)
            .setName((_a = this.character) === null || _a === void 0 ? void 0 : _a.id);
        return new packets_pb_1.Routing().setSource(source).setTarget(target);
    }
    packet() {
        return new packets_pb_1.PacketId().setPacketId((0, uuid_1.v4)());
    }
    static getType(packet) {
        switch (true) {
            case packet.hasText():
                return inworld_packet_entity_1.InworldPacketType.TEXT;
            case packet.hasDataChunk() &&
                packet.getDataChunk().getType() === packets_pb_1.DataChunk.DataType.AUDIO:
                return inworld_packet_entity_1.InworldPacketType.AUDIO;
            case packet.hasDataChunk() &&
                packet.getDataChunk().getType() === packets_pb_1.DataChunk.DataType.SILENCE:
                return inworld_packet_entity_1.InworldPacketType.SILENCE;
            case packet.hasCustom():
                return inworld_packet_entity_1.InworldPacketType.TRIGGER;
            case packet.hasControl():
                return inworld_packet_entity_1.InworldPacketType.CONTROL;
            case packet.hasEmotion():
                return inworld_packet_entity_1.InworldPacketType.EMOTION;
            case packet.hasCancelresponses():
                return inworld_packet_entity_1.InworldPacketType.CANCEL_RESPONSE;
            default:
                return inworld_packet_entity_1.InworldPacketType.UNKNOWN;
        }
    }
    static getControlType(packet) {
        switch (packet.getControl().getAction()) {
            case packets_pb_1.ControlEvent.Action.INTERACTION_END:
                return inworld_packet_entity_1.InworlControlType.INTERACTION_END;
            default:
                return inworld_packet_entity_1.InworlControlType.UNKNOWN;
        }
    }
    static durationToSeconds(duration) {
        return duration.getSeconds() + duration.getNanos() / 1000000000;
    }
}
exports.EventFactory = EventFactory;
