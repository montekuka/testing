"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InworldClient = void 0;
const util = require("node:util");
const world_engine_pb_1 = require("../../../proto/world-engine_pb");
const connection_service_1 = require("../services/connection.service");
const inworld_connection_service_1 = require("../services/inworld_connection.service");
class InworldClient {
    constructor() {
        this.scene = '';
        this.config = {
            capabilities: this.ensureCapabilities(),
        };
    }
    setApiKey(apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    setUser(user) {
        this.user = new world_engine_pb_1.UserRequest().setName(user.fullName);
        return this;
    }
    setClient(client) {
        this.client = new world_engine_pb_1.ClientRequest().setId(client.id);
        return this;
    }
    setConfiguration(config) {
        this.config = Object.assign(Object.assign({}, config), { capabilities: this.ensureCapabilities(config.capabilities) });
        return this;
    }
    setScene(name) {
        this.scene = name;
        return this;
    }
    setOnDisconnect(fn) {
        this.onDisconnect = fn;
        return this;
    }
    setOnError(fn) {
        this.onError = fn;
        return this;
    }
    setOnMessage(fn) {
        this.onMessage = fn;
        return this;
    }
    setGenerateSessionToken(generateSessionToken) {
        this.generateSessionTokenFn = generateSessionToken;
        return this;
    }
    setOnSession(props) {
        this.sessionGetterSetter = props;
        return this;
    }
    generateSessionToken() {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateApiKey();
            return new connection_service_1.ConnectionService({
                apiKey: this.apiKey,
            }).generateSessionToken();
        });
    }
    build() {
        this.validate();
        const connection = new connection_service_1.ConnectionService({
            apiKey: this.apiKey,
            name: this.scene,
            user: this.user,
            client: this.client,
            config: this.config,
            onError: this.onError,
            onMessage: this.onMessage,
            onDisconnect: this.onDisconnect,
            generateSessionToken: this.generateSessionTokenFn,
            sessionGetterSetter: this.sessionGetterSetter,
        });
        return new inworld_connection_service_1.InworldConnectionService(connection);
    }
    ensureCapabilities(capabilities) {
        var _a, _b, _c, _d, _e;
        return new world_engine_pb_1.CapabilitiesRequest()
            .setAudio((_a = capabilities === null || capabilities === void 0 ? void 0 : capabilities.audio) !== null && _a !== void 0 ? _a : true)
            .setEmotions((_b = capabilities === null || capabilities === void 0 ? void 0 : capabilities.emotions) !== null && _b !== void 0 ? _b : false)
            .setInterruptions((_c = capabilities === null || capabilities === void 0 ? void 0 : capabilities.interruptions) !== null && _c !== void 0 ? _c : false)
            .setPhonemeInfo((_d = capabilities === null || capabilities === void 0 ? void 0 : capabilities.phonemes) !== null && _d !== void 0 ? _d : false)
            .setSilenceEvents((_e = capabilities === null || capabilities === void 0 ? void 0 : capabilities.silence) !== null && _e !== void 0 ? _e : false)
            .setText(true)
            .setTriggers(true);
    }
    validateApiKey() {
        var _a;
        if (!((_a = this.apiKey) === null || _a === void 0 ? void 0 : _a.key) || !this.apiKey.secret) {
            throw Error('Api key is required');
        }
    }
    validate() {
        if (!this.generateSessionTokenFn) {
            this.validateApiKey();
        }
        if (!this.scene) {
            throw Error('Scene name is required');
        }
    }
}
exports.InworldClient = InworldClient;
InworldClient.prototype.setGenerateSessionToken = util.deprecate(InworldClient.prototype.setGenerateSessionToken, 'setGenerateSessionToken() is deprecated. Use setOnSession() instead to manage session.');
