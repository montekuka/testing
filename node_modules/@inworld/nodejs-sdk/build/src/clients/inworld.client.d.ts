import { ServiceError } from '@grpc/grpc-js';
import { ApiKey, Awaitable, Client, ClientConfiguration, GenerateSessionTokenFn, GetterSetter, User } from '../common/interfaces';
import { InworldPacket } from '../entities/inworld_packet.entity';
import { Session } from '../entities/session.entity';
import { InworldConnectionService } from '../services/inworld_connection.service';
export declare class InworldClient {
    private apiKey;
    private user;
    private scene;
    private client;
    private config;
    private generateSessionTokenFn;
    private sessionGetterSetter;
    private onDisconnect;
    private onError;
    private onMessage;
    constructor();
    setApiKey(apiKey: ApiKey): this;
    setUser(user: User): this;
    setClient(client: Client): this;
    setConfiguration(config: ClientConfiguration): this;
    setScene(name: string): this;
    setOnDisconnect(fn: () => void): this;
    setOnError(fn: (err: ServiceError) => void): this;
    setOnMessage(fn: (message: InworldPacket) => Awaitable<void>): this;
    setGenerateSessionToken(generateSessionToken: GenerateSessionTokenFn): this;
    setOnSession(props: GetterSetter<Session>): this;
    generateSessionToken(): Promise<import("..").SessionToken>;
    build(): InworldConnectionService;
    private ensureCapabilities;
    private validateApiKey;
    private validate;
}
